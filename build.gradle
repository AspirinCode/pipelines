/* Copyright 2017 Informatics Matters Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

apply plugin: 'com.bmuschko.docker-remote-api'

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:3.0.11'
    }
}

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

task wrapper(type: Wrapper) {
    gradleVersion = '4.4.1'
}

task cleanDist(type: Delete) {
    group = 'Distribution'
    delete 'build/dist'
}

task dist(type: Copy) {
    group = 'Distribution'
    dependsOn cleanDist

    destinationDir = file('build/dist')

    from('src/python') {
        includes = ['**/*.py','**/*.nf','**/*.json','**/*.yml',
                    '**/*.nsd.nf','**/*.nsd.config','README.rst']
        into 'pipelines'
    }

    from('src/nextflow') {
        includes = ['**/*.py','**/*.nf','**/*.json','**/*.yml',
                    '**/*.nsd.nf','**/*.nsd.config','README.rst']
        into 'nextflow'
    }
}

def pipeline = 'pipelines'
def squonkSdDir = '../squonk/docker/deploy/data/docker-services'

task buildDockerImage(type: DockerBuildImage) {
    dockerFile = file('Dockerfile-rdkit')
    inputDir = file('.')
    tag = "informaticsmatters/rdkit_${pipeline}:latest"
}

task buildSdLoaderDockerImage(type: DockerBuildImage) {
    dockerFile = file('Dockerfile-sdloader')
    inputDir = file('.')
    tag = "informaticsmatters/rdkit_${pipeline}-sdloader:latest"
}

task removeSquonkSd(type: Delete) {
    delete "${squonkSdDir}/${pipeline}"
    followSymlinks = true
}

task copySdToSquonk(type: Copy) {

    dependsOn removeSquonkSd
    dependsOn dist

    destinationDir = file("${squonkSdDir}")

    from('build/dist/pipelines') {
        into 'pipelines'
    }
    from('build/dist/nextflow') {
        into 'nextflow'
    }

}
